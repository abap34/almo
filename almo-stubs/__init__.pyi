"""
Stub file for almo Python extension module.
This file provides type hints for the almo module to enable better editor support.
"""

from typing import List, Any, Union, Optional
import typing

__version__: str

# Functions
def parse(md_content: str) -> Markdown:
    """Parse markdown to AST."""
    ...

def move_footnote_to_end(*args: Any) -> Any:
    """Move footnote definition to the end of the document."""
    ...

def required_pyodide(*args: Any) -> Any:
    """Check if pyodide is required."""
    ...

# Base classes
class ASTNode:
    """Base AST node class."""
    childs: List[ASTNode]
    
    def to_html(self) -> str: ...
    def to_json(self) -> str: ...
    def get_properties(self) -> Any: ...
    def get_classname(self) -> str: ...
    def get_uuid_str(self) -> str: ...
    def set_uuid(self) -> None: ...
    def pushback_child(self, child: ASTNode) -> None: ...
    def remove_child(self, child: ASTNode) -> None: ...
    def move_node(self, node: ASTNode) -> None: ...
    def concatenated_childs_html(self) -> str: ...
    def nodes_byclass(self, classname: str) -> List[ASTNode]: ...
    def get_childs(self) -> List[ASTNode]: ...

class Markdown(ASTNode):
    """Markdown AST node."""
    def __init__(self) -> None: ...
    def to_html(self) -> str: ...
    def to_dot(self) -> str: ...
    def to_json(self) -> str: ...

# Node classes
class CodeBlock(ASTNode):
    def __init__(self, lang: str, code: str) -> None: ...

class DivBlock(ASTNode):
    def __init__(self, class_name: str) -> None: ...

class EnumerateBlock(ASTNode):
    def __init__(self) -> None: ...

class ExecutableCodeBlock(ASTNode):
    def __init__(self, lang: str, code: str) -> None: ...

class FootnoteDefinition(ASTNode):
    def __init__(self, label: str) -> None: ...

class Header(ASTNode):
    def __init__(self, level: int) -> None: ...

class HorizontalLine(ASTNode):
    def __init__(self) -> None: ...

class InlineCodeBlock(ASTNode):
    def __init__(self, code: str) -> None: ...

class InlineFootnoteReference(ASTNode):
    def __init__(self, label: str) -> None: ...

class InlineImage(ASTNode):
    def __init__(self, src: str, alt: str) -> None: ...

class InlineItalic(ASTNode):
    def __init__(self) -> None: ...

class InlineMath(ASTNode):
    def __init__(self, math: str) -> None: ...

class InlineOverline(ASTNode):
    def __init__(self) -> None: ...

class InlineStrong(ASTNode):
    def __init__(self) -> None: ...

class InlineUrl(ASTNode):
    def __init__(self, url: str, text: str) -> None: ...

class Item(ASTNode):
    def __init__(self) -> None: ...

class Judge(ASTNode):
    def __init__(self, arg1: str, arg2: str, arg3: str, arg4: str, arg5: str, arg6: str, arg7: str, arg8: str) -> None: ...

class ListBlock(ASTNode):
    def __init__(self) -> None: ...

class LoadLib(ASTNode):
    def __init__(self, libs: List[str]) -> None: ...

class MathBlock(ASTNode):
    def __init__(self, math: str) -> None: ...

class NewLine(ASTNode):
    def __init__(self) -> None: ...

class Quote(ASTNode):
    def __init__(self) -> None: ...

class RawText(ASTNode):
    def __init__(self, text: str) -> None: ...

class Table(ASTNode):
    def __init__(self, content: List[Markdown], rows: int, cols: int, headers: List[str], alignments: List[int]) -> None: ...